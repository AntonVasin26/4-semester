Специальные контейнеры (ассоциативные и неупорядоченые)
1)Множество - std::set
	параметры шаблона
	1)тип
	2)критерий сортировки (оператор {неподходят <= и >=})
		1)антисиметричность x<y=T => y<x=F
		2)транзитивность x<y<z
		3)иррефлективность x<x =F
		4)транзитивность эквивалентности == -> !(x<y) && !(y<x)
	3)Аллокатор
	красно-чёрное дерево: RBT
		1)узлы (красные/чёрные), 2 потомка,
		2)дерево сбалансированно если 
		3)Корень чёрный => листья чёрные
		4)Потомки красного узла => черные узлы
		5)в простыз путях до листьем одинаковое кол-во черных узлов
		заключение всех пунктов - Lmax < 2Lmin
	Особености
		1)Сложность log(n)
		2)Данные в отсортированом порядке
		3)Проблема с балансировкой
		4)Удобен бинарный поиск
		5)отображение std::map
		6)хранится (ключ, значение)
2)мульти множество - std::multiset

3)map
	1)поиск по ключу log(N)
	2)поиск по значению log(N)

4)std::anordered(_multi)_(set/map)
	шаблон <тип, хэш функция, критерий эквивалентности, аллокатор>

	пример
	1)value --> в хэш функцию(возвращает хэш код[0, int_max))
	2)таблица содержит h ячеек для хранения. 
	для определения ячейки (хэш код%h)
	3)быстрое вычисление - не зависит от числа элементов в хэш таблице
						 - зависит от lenght_values
	4)равномерность
	5)если вычисленны одинаковые хэш коды для разных значений, то это коллизия.
	p~n/h=d - коэфф. заполнености хэш-таблицы
	6)есть ограничение dmax при достижении этого значения --> происходит увелечение
	хэш таблицы и рехэширование(O(n))
	7)Cпускаемся до первой свободноя ячйки - метод открытой адресации для решения колизии(O(n))
	8)метод закрытой адресации
	9)лучший случай поиска O(1)

boost::multi_index
	1)одно хранилище данных
	2)много способов реализации индексов
		1)vector - 
		2)set - 
		3)hash - 
	

