Рбработка строк
std::string <TChar - тип символа, char_traits, allocator>

C - строки "hello" - const char[6] -> '\0'
f(const char*) -> shrlen
std::getlaine -> считать до (\n) - не только
std::stoX(stod) - приобразование от строки к числу
std::to_string()
std::bitset
.c_str() - C строка
.substr - выделение подстроки

std::string - может работать с:
-char
-std::string
-C - строки
-Итераторы
-Индексы
(.find ->std::string::npos)

вопросы оптимизации
1)SSO
2)lazy_copy - отложенное копирование(scot maiders, gerb sator)

char16_t
char32_t
wchar_t

Вопросы  нтернацианализации(i18n) и локализации(l10n)
1)Алфавит,наборы символов и кодировки - (boost)
2)Дата время - (std)
3)Символ валюты, символ разделитель - (std)

Локаль - объект локального контекста
С++ std::locate -> поток ввода/вывода
setlocale(LC_All, "russion")
локаль - (название - язык_зона.код[атрибуты])
ru_RU.1251
rus_rus.utf-8

локаль состоит из фацетов(компоненты отвечающие за различные элементы)

Кодировки и наборы символов
Сhar - 8бит - 256 символов
сhar_32t(32 бита) - по стандарту unicode(1 114 111 символов)
1)Много байтовые кодировки(utf 8) - переменное количество байт на символ ->Экономия памяти
2)широкие кодировки(utf 32) - фиксированное колличество байт с запасом -> поиск за O(1)

кодировка ASCII(7 бит) - 128 символов
ISO - Lation - 1/9 (8 бит) -256 символов + спец сиволы языков
UTF-8(Многобайтовая ) www,linux
UTF-16(Многобайтова) - 16+16(сурогатная пара)
UTF-32(широкая кодировка)
UTF-16/32 ->litel endid/big endid

char_
char16_t
char32_t
wchar_t -> wide (не перегносим)

unicode - стандарт кодирования символов
1)стандартный набор символов (UCS)
2)Наборы кодировок - (UTF)

Таблица юникода
1)U+0000 - U+007F
2)U+007F - U+FFFF - базовая плоскость

(я - U+044F) - 0000 0100 0100 1111
если номер 
до 007F - один актет: (0xxxxxxx - (7 бит))
до 7FF - два актета (110 + 5 бит 10 + 6 бит 11 бит) - для я (110 1000 1 1000 1111)
до FFFF - три актета 1110 - 4 бита
до 10FFFF - четыре актета


Регулярные выражения и граматика регулярных выражений(ECMA Script)

Итераторы регулярных выражений
regax_iterator
regax_token_iterator