Последовательный контейнер
1)std::pair - шаблон структура, first/second, конструктор - оптимизирован под (move), make_pair - вызов создания пары
map/umerdered_map
2)std::tuple - вариативный шаблон

3)-Позиция элемента зависит от места и времени вставки
  -Контейнеры стандартной библиотеки обеспечивают семантику значений(семантика ссылок: указатели(*(plain)), std::share_ptr(copy) + weak_ptr, std::unigue_ptr(move))
  семантика ссылок: std::ref, std::cref

4)Основные контейнеры
	1)std::array<int, 10> - замена встроеного фиксированного массива
	с.at(2) - проверка на корректность индекса, c[i]
	элементы этого массива хранятся на стеке(вышескорость) (rand()%1000)

	2)std::vector <int, std::allocator <int>>, allocator(Arena),
	размер - size, push_back, resize
	ёмкость: capacity, reserve, shrink_to_fit...
	reserve - бронирует ячейки для контейнера, происходит только одно обращение к диспетчеру память
	insert/erase - итератор
	emplace - move(семантика перемещения)

	3)deque - вставка и удалениеи ив начало и в конец
	страничная организация памяти - выделяеися страница из 1024 ячеик и строк:
	push_back - добавление в нижнию половину страницы.
	push_front - добавление в верхнию половину страницы

	4)std::list - вставка и удаление из любого места за O(1);
	merge, splice; sort - неработает

	5)std::forward_list - максимальная экономия памяти
	нет size()
	используется в методе цепочек для решения колизий в методе цепочек
	before_begin()
	insert_after()

5)Адаптеры
	1)стек (LIFO)
	2)очередь (FIFO)
	3)приорететная очередь (FIFO + SORT)

6)специальные контейнеры
	1)std::bitset - высокоуровневая работа с битами
	2)std::valarray - ограничено применяется
	UBLAS;odeint;

7)Boost
	1)Boost::circular Buffer 
	адрес brgin может быть больше end;

	2)multi_array
		1)Matrix, Tensor
		2)boos.multiarray