#include <iostream>
#include <regex>
#include <string>
#include <fstream>



int main()
{
	std::cout << "ex4\n\n";
	std::regex pattern(R"((?:(?:[01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])|(?:(?:[0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})\.(?:(?:(?:0[13578]|1[02])\.(?:0[1-9]|[12][0-9]|3[01]))|(?:(?:0[469]|11)\.(?:0[1-9]|[12][0-9]|30))|(?:02\.(?:0[1-9]|[1][0-9]|2[0-8]))))|(?:(?:(?:[0-9]{2})(?:0[48]|[2468][048]|[13579][26])|(?:(?:0[48]|[2468][048]|[3579][26])00))\.02\.29))");
										//time							/data
	//Output all the times and dates in the file one after another,
	//taking into account leap years, but you need to write zeros
	//before the numbers.
	std::regex pattern1(R"((?:(?:[01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])|(?:(?:(?:[0-9]{3})?[1-9]|(?:[0-9]{2})?[1-9][0-9]{1}|(?:[0-9]{1})?[1-9][0-9]{2}|[1-9][0-9]{3})\.(?:(?:(?:0[13578]|1[02])\.(?:0[1-9]|[12][0-9]|3[01]))|(?:(?:0[469]|11)\.(?:0[1-9]|[12][0-9]|30))|(?:02\.(?:0[1-9]|[1][0-9]|2[0-8]))))|(?:(?:(?:[0-9]{2})?(?:0?[48]|[2468][048]|[13579][26])|(?:(?:0[48]|[2468][048]|[3579][26])00))\.02\.29))");
	//now distinguishes the years in the style: XXXX, XXX, XX, X
	std::regex pattern2(R"((?:(?:[01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])|(?:(?:(?:[0-9]{3})?[1-9]|(?:[0-9]{2})?[1-9][0-9]{1}|(?:[0-9]{1})?[1-9][0-9]{2}|[1-9][0-9]{3})\.(?:(?:(?:0?[13578]|1[02])\.(?:0[1-9]|[12][0-9]|3[01]))|(?:(?:0?[469]|11)\.(?:0[1-9]|[12][0-9]|30))|(?:0?2\.(?:0[1-9]|[1][0-9]|2[0-8]))))|(?:(?:(?:[0-9]{2})?(?:0?[48]|[2468][048]|[13579][26])|(?:(?:0[48]|[2468][048]|[3579][26])00))\.0?2\.29))");
	//now distinguishes the month in the style: XX, X
	std::regex pattern3(R"((?:(?:[01]?[0-9]|2[0-3]):[0-5]?[0-9]:[0-5]?[0-9])|(?:(?:(?:[0-9]{2})?(?:0?[48]|[2468][048]|[13579][26])|(?:(?:0?[48]|[2468][048]|[13579][26])00))\.0?2\.29)|(?:(?:(?:[0-9]{3})?[1-9]|(?:[0-9]{2})?[1-9][0-9]{1}|(?:[0-9]{1})?[1-9][0-9]{2}|[1-9][0-9]{3})\.(?:(?:(?:0?[13578]|1[02])\.(?:[12][0-9]|3[01]|0?[1-9]))|(?:(?:0?[469]|11)\.(?:[12][0-9]|30|0?[1-9]))|(?:0?2\.(?:[1][0-9]|2[0-8]|0?[1-9])))))");
	std::smatch matches;
	//getline(std::cin, line);
	std::fstream fin("ex.txt", std::ios::in);
	std::string code{
		std::istreambuf_iterator < char >(fin),
		std::istreambuf_iterator < char >() };
	std::sregex_iterator begin(code.cbegin(), code.cend(), pattern3);
	std::sregex_iterator end;

	std::for_each(begin, end, [](const std::smatch& m)
		{
			for (std::size_t i = 0; i < m.size(); ++i)
			{
				std::cout << m[i] << " | ";
			}

			std::cout << std::endl;
		});
}

