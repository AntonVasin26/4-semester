Параллельное програмирование
Алгоритмы
История
С++ 98, С++ 03, TR 2005 - WinAPI, POSIX, boost, +библиоткеки: MPI - под много одноядерныз процессов

C++11 - +30% core
	  - +100% std

C++14/17/20 - дополнение

Параллелизим
1) Исполнитель - мнимый параллелизм
	| 1 || 2 || 3 || 2 || 1 || ...
	Контектное переключение - сохранение состояния задачи, сохрание счётчика задачи,
							  поиск новой задачи, составление новой задачи
2)Истиный параллелизм - n иполнителей
	Апаратный параллелизм
	intel - Hyper Threndig
	AMD - SMT
	Один исполнитель 2 линейки памяти


Process 1 - адресное пространство 1

Посредник[IPC(OS)] - обеспечивает обмен информации между процесами (boost.interprocess) с помощью файла/network(boost.asio)/python: reguers, urllib

Process 2 - адресное пространство 2

Плюсы 1)Безопастность данных на процессах

Минусы	1)скорость(медленно)
		2)сложность(сложно)
		3)затратность(мало процессов)


Параллелизм на потоках
1)Создаём процесс - в нём несколько потоков[thread 1 - f()][thread 2 - g()]

	При создании потока выделяется stek(1мб)

минусы - 1)безопасность
Плюсы - 1)скорость
		2)Сложность(Просто)
		3)Затратность +/-

Для чего это нужно
1)Разделение задач
2)повышение производительности
	1)разделение по задачам(конвеир)
	2)разделение по данным -> рекурсивное


thread - нет return и throw

Что вляет на производительность 
1)Кол-во - исполителей
2)Конкуренция за данные
3)Ложное разделеение - перебрасывание КЭШ (локалность данных)
	В КЭШ будет подгруженно с запасом  - может возникнуть проблема обработки одного и тогоже КЭШ для разных потоков
4)Безопастность относительно исключений
5)Закон Амдала
	P - производительность
	f - доля последовательных участков(число без распараллеливания)
	N - кол-во исполнителей
	P=1/(f+(1-f)/N)

Асинхронность и механизм бущих результатов
std::future, std::asyne, std::package_task, std::promise




std::thread(join,detech, !return, !throw) -> std::async(есть return, есть throw) -> std::future(get,wait,valid)


boost::asio::thread_pool

std::promise



П.А. С++ 17
executiion policy
std::execution::seq
			  par
			  par_unseq - Вычматы(AVX,SSE)

include <execution>
1)Время подготовки(+const)
2)Количество и сложность операций
3)Объём данных
4)Характер задачи
5)Работа с паметью